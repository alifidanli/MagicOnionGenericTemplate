// <auto-generated />
#pragma warning disable CS0105
using MagicT.Shared.Models.MemoryDatabaseModels;
using MasterMemory.Validation;
using MasterMemory;
using MessagePack;
using System.Collections.Generic;
using System;
using MagicT.Shared.Tables;

namespace MagicT.Shared
{
   public sealed class MemoryDatabase : MemoryDatabaseBase
   {
        public AuthorizationsTable AuthorizationsTable { get; private set; }
        public PermissionsTable PermissionsTable { get; private set; }
        public RolesTable RolesTable { get; private set; }
        public UsersTable UsersTable { get; private set; }

        public MemoryDatabase(
            AuthorizationsTable AuthorizationsTable,
            PermissionsTable PermissionsTable,
            RolesTable RolesTable,
            UsersTable UsersTable
        )
        {
            this.AuthorizationsTable = AuthorizationsTable;
            this.PermissionsTable = PermissionsTable;
            this.RolesTable = RolesTable;
            this.UsersTable = UsersTable;
        }

        public MemoryDatabase(byte[] databaseBinary, bool internString = true, MessagePack.IFormatterResolver formatterResolver = null, int maxDegreeOfParallelism = 1)
            : base(databaseBinary, internString, formatterResolver, maxDegreeOfParallelism)
        {
        }

        protected override void Init(Dictionary<string, (int offset, int count)> header, System.ReadOnlyMemory<byte> databaseBinary, MessagePack.MessagePackSerializerOptions options, int maxDegreeOfParallelism)
        {
            if(maxDegreeOfParallelism == 1)
            {
                InitSequential(header, databaseBinary, options, maxDegreeOfParallelism);
            }
            else
            {
                InitParallel(header, databaseBinary, options, maxDegreeOfParallelism);
            }
        }

        void InitSequential(Dictionary<string, (int offset, int count)> header, System.ReadOnlyMemory<byte> databaseBinary, MessagePack.MessagePackSerializerOptions options, int maxDegreeOfParallelism)
        {
            this.AuthorizationsTable = ExtractTableData<Authorizations, AuthorizationsTable>(header, databaseBinary, options, xs => new AuthorizationsTable(xs));
            this.PermissionsTable = ExtractTableData<Permissions, PermissionsTable>(header, databaseBinary, options, xs => new PermissionsTable(xs));
            this.RolesTable = ExtractTableData<Roles, RolesTable>(header, databaseBinary, options, xs => new RolesTable(xs));
            this.UsersTable = ExtractTableData<Users, UsersTable>(header, databaseBinary, options, xs => new UsersTable(xs));
        }

        void InitParallel(Dictionary<string, (int offset, int count)> header, System.ReadOnlyMemory<byte> databaseBinary, MessagePack.MessagePackSerializerOptions options, int maxDegreeOfParallelism)
        {
            var extracts = new Action[]
            {
                () => this.AuthorizationsTable = ExtractTableData<Authorizations, AuthorizationsTable>(header, databaseBinary, options, xs => new AuthorizationsTable(xs)),
                () => this.PermissionsTable = ExtractTableData<Permissions, PermissionsTable>(header, databaseBinary, options, xs => new PermissionsTable(xs)),
                () => this.RolesTable = ExtractTableData<Roles, RolesTable>(header, databaseBinary, options, xs => new RolesTable(xs)),
                () => this.UsersTable = ExtractTableData<Users, UsersTable>(header, databaseBinary, options, xs => new UsersTable(xs)),
            };
            
            System.Threading.Tasks.Parallel.Invoke(new System.Threading.Tasks.ParallelOptions
            {
                MaxDegreeOfParallelism = maxDegreeOfParallelism
            }, extracts);
        }

        public ImmutableBuilder ToImmutableBuilder()
        {
            return new ImmutableBuilder(this);
        }

        public DatabaseBuilder ToDatabaseBuilder()
        {
            var builder = new DatabaseBuilder();
            builder.Append(this.AuthorizationsTable.GetRawDataUnsafe());
            builder.Append(this.PermissionsTable.GetRawDataUnsafe());
            builder.Append(this.RolesTable.GetRawDataUnsafe());
            builder.Append(this.UsersTable.GetRawDataUnsafe());
            return builder;
        }

        public DatabaseBuilder ToDatabaseBuilder(MessagePack.IFormatterResolver resolver)
        {
            var builder = new DatabaseBuilder(resolver);
            builder.Append(this.AuthorizationsTable.GetRawDataUnsafe());
            builder.Append(this.PermissionsTable.GetRawDataUnsafe());
            builder.Append(this.RolesTable.GetRawDataUnsafe());
            builder.Append(this.UsersTable.GetRawDataUnsafe());
            return builder;
        }

#if !DISABLE_MASTERMEMORY_VALIDATOR

        public ValidateResult Validate()
        {
            var result = new ValidateResult();
            var database = new ValidationDatabase(new object[]
            {
                AuthorizationsTable,
                PermissionsTable,
                RolesTable,
                UsersTable,
            });

            ((ITableUniqueValidate)AuthorizationsTable).ValidateUnique(result);
            ValidateTable(AuthorizationsTable.All, database, "Id", AuthorizationsTable.PrimaryKeySelector, result);
            ((ITableUniqueValidate)PermissionsTable).ValidateUnique(result);
            ValidateTable(PermissionsTable.All, database, "Id", PermissionsTable.PrimaryKeySelector, result);
            ((ITableUniqueValidate)RolesTable).ValidateUnique(result);
            ValidateTable(RolesTable.All, database, "Id", RolesTable.PrimaryKeySelector, result);
            ((ITableUniqueValidate)UsersTable).ValidateUnique(result);
            ValidateTable(UsersTable.All, database, "UserId", UsersTable.PrimaryKeySelector, result);

            return result;
        }

#endif

        static MasterMemory.Meta.MetaDatabase metaTable;

        public static object GetTable(MemoryDatabase db, string tableName)
        {
            switch (tableName)
            {
                case "Authorizations":
                    return db.AuthorizationsTable;
                case "Permissions":
                    return db.PermissionsTable;
                case "Roles":
                    return db.RolesTable;
                case "Users":
                    return db.UsersTable;
                
                default:
                    return null;
            }
        }

#if !DISABLE_MASTERMEMORY_METADATABASE

        public static MasterMemory.Meta.MetaDatabase GetMetaDatabase()
        {
            if (metaTable != null) return metaTable;

            var dict = new Dictionary<string, MasterMemory.Meta.MetaTable>();
            dict.Add("Authorizations", MagicT.Shared.Tables.AuthorizationsTable.CreateMetaTable());
            dict.Add("Permissions", MagicT.Shared.Tables.PermissionsTable.CreateMetaTable());
            dict.Add("Roles", MagicT.Shared.Tables.RolesTable.CreateMetaTable());
            dict.Add("Users", MagicT.Shared.Tables.UsersTable.CreateMetaTable());

            metaTable = new MasterMemory.Meta.MetaDatabase(dict);
            return metaTable;
        }

#endif
    }
}