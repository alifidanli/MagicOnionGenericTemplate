// <auto-generated />
#pragma warning disable CS0105
using MagicT.Shared.Models.MemoryDatabaseModels;
using MasterMemory.Validation;
using MasterMemory;
using MessagePack;
using System.Collections.Generic;
using System;
using MagicT.Shared.Tables;

namespace MagicT.Shared
{
   public sealed class ImmutableBuilder : ImmutableBuilderBase
   {
        MemoryDatabase memory;

        public ImmutableBuilder(MemoryDatabase memory)
        {
            this.memory = memory;
        }

        public MemoryDatabase Build()
        {
            return memory;
        }

        public void ReplaceAll(System.Collections.Generic.IList<Authorizations> data)
        {
            var newData = CloneAndSortBy(data, x => x.Id, System.Collections.Generic.Comparer<int>.Default);
            var table = new AuthorizationsTable(newData);
            memory = new MemoryDatabase(
                table,
                memory.MemoryExpiredTokensTable,
                memory.PermissionsTable,
                memory.RolesTable,
                memory.UsersTable
            
            );
        }

        public void RemoveAuthorizations(int[] keys)
        {
            var data = RemoveCore(memory.AuthorizationsTable.GetRawDataUnsafe(), keys, x => x.Id, System.Collections.Generic.Comparer<int>.Default);
            var newData = CloneAndSortBy(data, x => x.Id, System.Collections.Generic.Comparer<int>.Default);
            var table = new AuthorizationsTable(newData);
            memory = new MemoryDatabase(
                table,
                memory.MemoryExpiredTokensTable,
                memory.PermissionsTable,
                memory.RolesTable,
                memory.UsersTable
            
            );
        }

        public void Diff(Authorizations[] addOrReplaceData)
        {
            var data = DiffCore(memory.AuthorizationsTable.GetRawDataUnsafe(), addOrReplaceData, x => x.Id, System.Collections.Generic.Comparer<int>.Default);
            var newData = CloneAndSortBy(data, x => x.Id, System.Collections.Generic.Comparer<int>.Default);
            var table = new AuthorizationsTable(newData);
            memory = new MemoryDatabase(
                table,
                memory.MemoryExpiredTokensTable,
                memory.PermissionsTable,
                memory.RolesTable,
                memory.UsersTable
            
            );
        }

        public void ReplaceAll(System.Collections.Generic.IList<MemoryExpiredTokens> data)
        {
            var newData = CloneAndSortBy(data, x => x.id, System.Collections.Generic.Comparer<Guid>.Default);
            var table = new MemoryExpiredTokensTable(newData);
            memory = new MemoryDatabase(
                memory.AuthorizationsTable,
                table,
                memory.PermissionsTable,
                memory.RolesTable,
                memory.UsersTable
            
            );
        }

        public void RemoveMemoryExpiredTokens(Guid[] keys)
        {
            var data = RemoveCore(memory.MemoryExpiredTokensTable.GetRawDataUnsafe(), keys, x => x.id, System.Collections.Generic.Comparer<Guid>.Default);
            var newData = CloneAndSortBy(data, x => x.id, System.Collections.Generic.Comparer<Guid>.Default);
            var table = new MemoryExpiredTokensTable(newData);
            memory = new MemoryDatabase(
                memory.AuthorizationsTable,
                table,
                memory.PermissionsTable,
                memory.RolesTable,
                memory.UsersTable
            
            );
        }

        public void Diff(MemoryExpiredTokens[] addOrReplaceData)
        {
            var data = DiffCore(memory.MemoryExpiredTokensTable.GetRawDataUnsafe(), addOrReplaceData, x => x.id, System.Collections.Generic.Comparer<Guid>.Default);
            var newData = CloneAndSortBy(data, x => x.id, System.Collections.Generic.Comparer<Guid>.Default);
            var table = new MemoryExpiredTokensTable(newData);
            memory = new MemoryDatabase(
                memory.AuthorizationsTable,
                table,
                memory.PermissionsTable,
                memory.RolesTable,
                memory.UsersTable
            
            );
        }

        public void ReplaceAll(System.Collections.Generic.IList<Permissions> data)
        {
            var newData = CloneAndSortBy(data, x => x.Id, System.Collections.Generic.Comparer<int>.Default);
            var table = new PermissionsTable(newData);
            memory = new MemoryDatabase(
                memory.AuthorizationsTable,
                memory.MemoryExpiredTokensTable,
                table,
                memory.RolesTable,
                memory.UsersTable
            
            );
        }

        public void RemovePermissions(int[] keys)
        {
            var data = RemoveCore(memory.PermissionsTable.GetRawDataUnsafe(), keys, x => x.Id, System.Collections.Generic.Comparer<int>.Default);
            var newData = CloneAndSortBy(data, x => x.Id, System.Collections.Generic.Comparer<int>.Default);
            var table = new PermissionsTable(newData);
            memory = new MemoryDatabase(
                memory.AuthorizationsTable,
                memory.MemoryExpiredTokensTable,
                table,
                memory.RolesTable,
                memory.UsersTable
            
            );
        }

        public void Diff(Permissions[] addOrReplaceData)
        {
            var data = DiffCore(memory.PermissionsTable.GetRawDataUnsafe(), addOrReplaceData, x => x.Id, System.Collections.Generic.Comparer<int>.Default);
            var newData = CloneAndSortBy(data, x => x.Id, System.Collections.Generic.Comparer<int>.Default);
            var table = new PermissionsTable(newData);
            memory = new MemoryDatabase(
                memory.AuthorizationsTable,
                memory.MemoryExpiredTokensTable,
                table,
                memory.RolesTable,
                memory.UsersTable
            
            );
        }

        public void ReplaceAll(System.Collections.Generic.IList<Roles> data)
        {
            var newData = CloneAndSortBy(data, x => x.Id, System.Collections.Generic.Comparer<int>.Default);
            var table = new RolesTable(newData);
            memory = new MemoryDatabase(
                memory.AuthorizationsTable,
                memory.MemoryExpiredTokensTable,
                memory.PermissionsTable,
                table,
                memory.UsersTable
            
            );
        }

        public void RemoveRoles(int[] keys)
        {
            var data = RemoveCore(memory.RolesTable.GetRawDataUnsafe(), keys, x => x.Id, System.Collections.Generic.Comparer<int>.Default);
            var newData = CloneAndSortBy(data, x => x.Id, System.Collections.Generic.Comparer<int>.Default);
            var table = new RolesTable(newData);
            memory = new MemoryDatabase(
                memory.AuthorizationsTable,
                memory.MemoryExpiredTokensTable,
                memory.PermissionsTable,
                table,
                memory.UsersTable
            
            );
        }

        public void Diff(Roles[] addOrReplaceData)
        {
            var data = DiffCore(memory.RolesTable.GetRawDataUnsafe(), addOrReplaceData, x => x.Id, System.Collections.Generic.Comparer<int>.Default);
            var newData = CloneAndSortBy(data, x => x.Id, System.Collections.Generic.Comparer<int>.Default);
            var table = new RolesTable(newData);
            memory = new MemoryDatabase(
                memory.AuthorizationsTable,
                memory.MemoryExpiredTokensTable,
                memory.PermissionsTable,
                table,
                memory.UsersTable
            
            );
        }

        public void ReplaceAll(System.Collections.Generic.IList<Users> data)
        {
            var newData = CloneAndSortBy(data, x => x.UserId, System.Collections.Generic.Comparer<int>.Default);
            var table = new UsersTable(newData);
            memory = new MemoryDatabase(
                memory.AuthorizationsTable,
                memory.MemoryExpiredTokensTable,
                memory.PermissionsTable,
                memory.RolesTable,
                table
            
            );
        }

        public void RemoveUsers(int[] keys)
        {
            var data = RemoveCore(memory.UsersTable.GetRawDataUnsafe(), keys, x => x.UserId, System.Collections.Generic.Comparer<int>.Default);
            var newData = CloneAndSortBy(data, x => x.UserId, System.Collections.Generic.Comparer<int>.Default);
            var table = new UsersTable(newData);
            memory = new MemoryDatabase(
                memory.AuthorizationsTable,
                memory.MemoryExpiredTokensTable,
                memory.PermissionsTable,
                memory.RolesTable,
                table
            
            );
        }

        public void Diff(Users[] addOrReplaceData)
        {
            var data = DiffCore(memory.UsersTable.GetRawDataUnsafe(), addOrReplaceData, x => x.UserId, System.Collections.Generic.Comparer<int>.Default);
            var newData = CloneAndSortBy(data, x => x.UserId, System.Collections.Generic.Comparer<int>.Default);
            var table = new UsersTable(newData);
            memory = new MemoryDatabase(
                memory.AuthorizationsTable,
                memory.MemoryExpiredTokensTable,
                memory.PermissionsTable,
                memory.RolesTable,
                table
            
            );
        }

    }
}