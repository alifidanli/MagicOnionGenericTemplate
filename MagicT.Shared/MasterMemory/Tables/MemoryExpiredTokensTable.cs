// <auto-generated />
#pragma warning disable CS0105
using MagicT.Shared.Models.MemoryDatabaseModels;
using MasterMemory.Validation;
using MasterMemory;
using MessagePack;
using System.Collections.Generic;
using System;

namespace MagicT.Shared.Tables
{
   public sealed partial class MemoryExpiredTokensTable : TableBase<MemoryExpiredTokens>, ITableUniqueValidate
   {
        public Func<MemoryExpiredTokens, Guid> PrimaryKeySelector => primaryIndexSelector;
        readonly Func<MemoryExpiredTokens, Guid> primaryIndexSelector;

        readonly MemoryExpiredTokens[] secondaryIndex1;
        readonly Func<MemoryExpiredTokens, string> secondaryIndex1Selector;

        public MemoryExpiredTokensTable(MemoryExpiredTokens[] sortedData)
            : base(sortedData)
        {
            this.primaryIndexSelector = x => x.id;
            this.secondaryIndex1Selector = x => x.ContactIdentifier;
            this.secondaryIndex1 = CloneAndSortBy(this.secondaryIndex1Selector, System.StringComparer.Ordinal);
            OnAfterConstruct();
        }

        partial void OnAfterConstruct();

        public RangeView<MemoryExpiredTokens> SortByContactIdentifier => new RangeView<MemoryExpiredTokens>(secondaryIndex1, 0, secondaryIndex1.Length - 1, true);

        public MemoryExpiredTokens FindByid(Guid key)
        {
            return FindUniqueCore(data, primaryIndexSelector, System.Collections.Generic.Comparer<Guid>.Default, key, false);
        }
        
        public bool TryFindByid(Guid key, out MemoryExpiredTokens result)
        {
            return TryFindUniqueCore(data, primaryIndexSelector, System.Collections.Generic.Comparer<Guid>.Default, key, out result);
        }

        public MemoryExpiredTokens FindClosestByid(Guid key, bool selectLower = true)
        {
            return FindUniqueClosestCore(data, primaryIndexSelector, System.Collections.Generic.Comparer<Guid>.Default, key, selectLower);
        }

        public RangeView<MemoryExpiredTokens> FindRangeByid(Guid min, Guid max, bool ascendant = true)
        {
            return FindUniqueRangeCore(data, primaryIndexSelector, System.Collections.Generic.Comparer<Guid>.Default, min, max, ascendant);
        }

        public RangeView<MemoryExpiredTokens> FindByContactIdentifier(string key)
        {
            return FindManyCore(secondaryIndex1, secondaryIndex1Selector, System.StringComparer.Ordinal, key);
        }

        public RangeView<MemoryExpiredTokens> FindClosestByContactIdentifier(string key, bool selectLower = true)
        {
            return FindManyClosestCore(secondaryIndex1, secondaryIndex1Selector, System.StringComparer.Ordinal, key, selectLower);
        }

        public RangeView<MemoryExpiredTokens> FindRangeByContactIdentifier(string min, string max, bool ascendant = true)
        {
            return FindManyRangeCore(secondaryIndex1, secondaryIndex1Selector, System.StringComparer.Ordinal, min, max, ascendant);
        }


        void ITableUniqueValidate.ValidateUnique(ValidateResult resultSet)
        {
#if !DISABLE_MASTERMEMORY_VALIDATOR

            ValidateUniqueCore(data, primaryIndexSelector, "id", resultSet);       

#endif
        }

#if !DISABLE_MASTERMEMORY_METADATABASE

        public static MasterMemory.Meta.MetaTable CreateMetaTable()
        {
            return new MasterMemory.Meta.MetaTable(typeof(MemoryExpiredTokens), typeof(MemoryExpiredTokensTable), "MemoryExpiredTokens",
                new MasterMemory.Meta.MetaProperty[]
                {
                    new MasterMemory.Meta.MetaProperty(typeof(MemoryExpiredTokens).GetProperty("id")),
                    new MasterMemory.Meta.MetaProperty(typeof(MemoryExpiredTokens).GetProperty("ContactIdentifier")),
                    new MasterMemory.Meta.MetaProperty(typeof(MemoryExpiredTokens).GetProperty("AssociatedToken")),
                    new MasterMemory.Meta.MetaProperty(typeof(MemoryExpiredTokens).GetProperty("EncryptedBytes")),
                    new MasterMemory.Meta.MetaProperty(typeof(MemoryExpiredTokens).GetProperty("Nonce")),
                    new MasterMemory.Meta.MetaProperty(typeof(MemoryExpiredTokens).GetProperty("Mac")),
                },
                new MasterMemory.Meta.MetaIndex[]{
                    new MasterMemory.Meta.MetaIndex(new System.Reflection.PropertyInfo[] {
                        typeof(MemoryExpiredTokens).GetProperty("id"),
                    }, true, true, System.Collections.Generic.Comparer<Guid>.Default),
                    new MasterMemory.Meta.MetaIndex(new System.Reflection.PropertyInfo[] {
                        typeof(MemoryExpiredTokens).GetProperty("ContactIdentifier"),
                    }, false, false, System.StringComparer.Ordinal),
                });
        }

#endif
    }
}